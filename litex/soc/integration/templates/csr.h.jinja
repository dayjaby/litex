{{ generated_banner }}

{% if with_access_functions %}
#include <generated/soc.h>
{% endif %}

#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H

{% if with_access_functions %}
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
{% endif %}

#ifndef CSR_BASE
#define CSR_BASE {{ csr_base | hex }}L
#endif

{% for name, region in regions.items() %}
/* {{ name }} */
{% set ns = namespace(origin=region.origin-csr_base) %}
#define CSR_{{ name | upper}}_BASE (CSR_BASE + {{ ns.origin | hex }}L)
{% if region.obj.__class__.__name__ != "Memory" %}
{% for csr in region.obj %}
{% set read_only = getattr(csr, "read_only", False) %}
{% set reg_name = name + "_" + csr.name.lower() %}
{% set nr = (csr.size + region.busword - 1)//region.busword %}

{% with %}
{% set reg_base = ns.origin %}
{% set nwords = nr %}
{% set busword = region.busword %}
{% include 'csr_rw.c.jinja' %}
{% endwith %}

{% set ns.origin = ns.origin+alignment//8*nr %}
{% if ( csr | hasattr("fields")) %}
{% for field in csr.fields.fields %}
#define CSR_{{ name | upper }}_{{ csr.name | upper }}_{{ field.name | upper }}_OFFSET {{ field.offset }}
#define CSR_{{ name | upper }}_{{ csr.name | upper }}_{{ field.name | upper }}_SIZE {{ field.size }}
{% if with_access_functions and csr.size <=32 %}
{% set field_name = reg_name + "_" + field.name.lower() %}
static inline uint32_t {{ field_name }}_extract(uint32_t oldword) {
	uint32_t mask = ((1 << {{ field.size }})-1);
        return ( (oldword >> {{ field.offset }}) & mask );
}

static inline uint32_t {{ field_name }}_read(void) {
	uint32_t word = {{ reg_name }}_read();
        return {{ field_name }}_extract(word);
}

{% if not read_only %}
static inline uint32_t {{ field_name }}_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << {{ field.size }})-1);
        return (oldword & (~(mask << {{ field.offset }}))) | (mask & plain_value)<< {{ field.offset }};
}

static inline void {{ field_name }}_write(uint32_t plain_value) {
	uint32_t oldword = {{ reg_name }}_read();
        uint32_t newword = {{ field_name }}_replace(oldword, plain_value);
        {{ reg_name }}_write(newword);
}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

#endif /* ! __GENERATED_CSR_H */
